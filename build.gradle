import org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask

plugins {
    id 'fabric-loom' version '1.4-SNAPSHOT'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm' version '1.9.21'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {

    mavenCentral()

    maven {
        url "https://cursemaven.com"
        content { includeGroup "curse.maven" }
    }
    maven {
        url "https://api.modrinth.com/maven"
        content { includeGroup "maven.modrinth" }
    }
    maven { url "https://jitpack.io" }
    maven { url "https://maven.architectury.dev" }
    maven { url "https://maven.blamejared.com" }
    maven { url "https://maven.jamieswhiteshirt.com/libs-release" }
    maven { url "https://maven.ladysnake.org/releases" }
    maven { url "https://maven.shedaniel.me" }
    maven { url "https://maven.terraformersmc.com/releases" }
    maven { url "https://maven.tterrag.com/" }
    maven { url "https://mvn.devos.one/snapshots/" }
    maven { url "https://raw.githubusercontent.com/SolidBlock-cn/mvn-repo/main" }
    maven { url "https://ueaj.dev/maven" }

}

dependencies {

    minecraft("com.mojang:minecraft:${project.minecraft_version}")
    mappings("net.fabricmc:yarn:${project.yarn_mappings}:v2")
    modImplementation("net.fabricmc:fabric-loader:${project.loader_version}")

    modImplementation("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")
    modImplementation("net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

    //modImplementation("pers.solid:brrp-fabric:1.0.1-1.18.2") { transitive = false }

    //CraftTweaker
    modImplementation("com.blamejared.crafttweaker:CraftTweaker-fabric-1.18.2:9.1.211") {
        exclude(module: "fabric-api")
        exclude(module: "fabric-loader")
    }

    //Roughly Enough Items
    modImplementation("me.shedaniel.cloth:cloth-config-fabric:6.4.90") {
        exclude(module: "fabric-api")
        exclude(module: "fabric-loader")
    }

    modImplementation("me.shedaniel:RoughlyEnoughItems-fabric:8.3.618") {
        exclude(module: "fabric-api")
        exclude(module: "fabric-loader")
    }

    //Create
    modImplementation("com.simibubi.create:create-fabric-${minecraft_version}:0.5.0.i-944+1.18.2") {
        exclude(module: "fabric-api")
        exclude(module: "fabric-loader")
    }

    modCompileOnly("com.tterrag.registrate_fabric:Registrate:MC1.18.2-1.1.7") {
        exclude(module: "fabric-api")
        exclude(module: "fabric-loader")
    }

    //Modern Industrialization
    modCompileOnly("maven.modrinth:modern-industrialization:1.2.3") {
        exclude(module: "fabric-api")
        exclude(module: "fabric-loader")
    }

    //Tech Reborn
    modImplementation("TechReborn:TechReborn-1.18:+") {
        exclude(module: "fabric-api")
        exclude(module: "fabric-loader")
    }

}

loom {

    accessWidenerPath = file("src/main/resources/ht_materials.accesswidener")

    runs {
        client {
            vmArg("-Dmixin.debug.export=true")
        }
    }

}

processResources {

    inputs.property "version", version
    inputs.property "minecraft_version", minecraft_version
    inputs.property "loader_version", loader_version
    inputs.property "fabric_kotlin_version", fabric_kotlin_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": version,
                "minecraft_version": minecraft_version,
                "loader_version": loader_version,
                "fabric_kotlin_version": fabric_kotlin_version
    }

}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
}

java {
    withSourcesJar()
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

jar {
    from("LICENSE") {
        rename { "${it}_${archivesBaseName}" }
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
        // Notice: This block does NOT have the same function as the block in the top level.
        // The repositories here will be used for publishing your artifact, not for
        // retrieving dependencies.
    }
}

kotlin {
    jvmToolchain(17)
}

tasks.named('compileKotlin', KotlinCompilationTask.class) {
    compilerOptions {
        freeCompilerArgs.add("-Xjvm-default=all")
    }
}